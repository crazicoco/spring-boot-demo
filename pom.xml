<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.demo.springboot</groupId>
	<artifactId>spring_boot_demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>spring_boot_demo</name>
	<description>
		spirngboot demo contains：mysql、mysql 多数据源、dbcp2 数据库连接池、mybatis(纯注解的形式写法，限制：无法使用判断拼接sql，有可能是我没找到。)、junit4 + mokito 、
		redis、redis lettuce nosql数据库连接池技术、基于redis 的 session 共享方案、基于redis 的cache管理，提升性能（）、
		thymeleaf 前端模板引擎、WebJars jar形式的js引入依赖、热部署、定时任务 job、
	</description>

	<!--Inherit defaults from Spring Boot -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<!-- <version>1.5.9.RELEASE</version> -->
		<!-- 使用较新的 spring boot 版本 -->
		<!-- 区别： 基于Spring5和JDK8、而Spring 1x则用的是降低版本、JPA中，findById 返回了一个Optional对象，改动较大，会直接影响所有业务代码。 
			Spring Boot中默认支持的连接池有dbcp,dbcp2, tomcat, hikari三种连接池。 但是在2.0以后，dbcp貌似就不兼容了，要用dbcp2。 -->
		<version>2.1.3.RELEASE</version>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<!-- spring-boot-starter：核心模块，包括自动配置支持、日志和YAML -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<!-- spring boot web 依赖 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- spring-boot-starter-test：测试模块，包括JUnit、Mockito。 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- SpringBoot2.X Junit被使用Junit5.X , 会导致单元测试报错。需要指定 spring-test 包的引入和junit4的引入。 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>4.3.18.RELEASE</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>
		<!--jpa 引入，使用其注解标准 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- MySQL 数据库驱动引入 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		<!-- mybatis 引入（orm框架） -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.2</version>
		</dependency>
		<!-- spring jpa
	       spring jpa中带有自带的tomcat数据连接池;
	       在代码中我们也需要用到.
	     -->
	    <dependency>
	       <groupId>org.springframework.boot</groupId>
	       <artifactId>spring-boot-starter-data-jpa</artifactId>
	    </dependency>
		<!-- redis 引入 -->
		<!-- springboot 1.5的版本默认采用的连接池技术是jedis。 springboot 2.0以上版本默认连接池是lettuce（莱锤死，高级redis客户端），由于以前多使用jedis的连接池技术，所以这里工程中使用lettuce。 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
		</dependency>
		<!-- sessiong 共享：分布式系统中，sessiong共享有很多的解决方案，其中托管到缓存中应该是最常用的方案之一。 Spring 
			Session官方说明： Spring Session provides an API and implementations for managing 
			a user’s session information. -->
		<dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-data-redis</artifactId>
		</dependency>
		<!-- thymeleaf 模板引擎引入，暂时不用 示例：https://www.cnblogs.com/hjwublog/category/767818.html -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>net.sourceforge.nekohtml</groupId>
			<artifactId>nekohtml</artifactId>
			<version>1.9.22</version>
		</dependency>
		<!-- lombok 引入，功能：Lombok 是一种 Java™ 实用工具，可用来帮助开发人员消除 Java 的冗长，尤其是对于简单的 Java 对象（POJO）。它通过注解实现这一目的。 -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.4</version>
		</dependency>
		<!-- WebJars是将客户端（浏览器）资源（JavaScript，Css等）打成jar包文件，以对资源进行统一依赖管理。WebJars的jar包部署在Maven中央仓库上（仓库地址：https://mvnrepository.com/artifact/org.webjars.npm/vue）。 
			我们在开发Java web项目的时候会使用像Maven，Gradle等构建工具以实现对jar包版本依赖管理，以及项目的自动化管理，但是对于JavaScript，Css等前端资源包， 
			我们只能采用拷贝到webapp下的方式，这样做就无法对这些资源进行依赖管理。那么WebJars就提供给我们这些前端资源的jar包形势，我们就可以进行依赖管理。 -->
		<dependency>
			<groupId>org.webjars.npm</groupId>
			<artifactId>vue</artifactId>
			<version>2.5.22</version>
		</dependency>
		<!-- 热部署插件： devtools可以实现热部署。devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机），注意：因为其采用的虚拟机机制，该项重启是很快的。 
			如果设置SpringApplication.setRegisterShutdownHook(false)，则自动重启将不起作用。 设置 spring.devtools.restart.enabled 
			属性为false，可以关闭该特性。 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<!-- optional=true,依赖不会传递， -->
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
	</dependencies>

	<!-- maven build 配置 -->
	<build>
		<!-- -->
		<finalName>demo-boot</finalName>
		<plugins>
			<!-- spring boot 可用的 maven 打包插件 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<!-- 热部署 devtools 启动 -->
				<configuration>
					<jvmArguments>-Dfile.encoding=UTF-8</jvmArguments>
					<fork>true</fork>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>